[{"name":"radix_pulse","qualifiedName":"radix_pulse","href":"radix_pulse/","kind":9,"packageRank":0,"desc":"radix_pulse"},{"name":"clearBufferPools","qualifiedName":"radix_pulse.clearBufferPools","href":"radix_pulse/clearBufferPools.html","kind":8,"packageRank":0,"desc":"A top-level function to clear all global buffer pools.","enclosedBy":{"name":"radix_pulse","kind":9,"href":"radix_pulse/"}},{"name":"radixSortBigInt","qualifiedName":"radix_pulse.radixSortBigInt","href":"radix_pulse/radixSortBigInt.html","kind":8,"packageRank":0,"desc":"Sorts a list of BigInts in place using a highly optimized, hybrid Radix Sort.","enclosedBy":{"name":"radix_pulse","kind":9,"href":"radix_pulse/"}},{"name":"radixSortBigIntWithRange","qualifiedName":"radix_pulse.radixSortBigIntWithRange","href":"radix_pulse/radixSortBigIntWithRange.html","kind":8,"packageRank":0,"desc":"Sorts a list of BigInts with range optimization.","enclosedBy":{"name":"radix_pulse","kind":9,"href":"radix_pulse/"}},{"name":"radixSortDouble","qualifiedName":"radix_pulse.radixSortDouble","href":"radix_pulse/radixSortDouble.html","kind":8,"packageRank":0,"desc":"Sorts a list of doubles in place using a stable Radix Sort.","enclosedBy":{"name":"radix_pulse","kind":9,"href":"radix_pulse/"}},{"name":"radixSortFloat64","qualifiedName":"radix_pulse.radixSortFloat64","href":"radix_pulse/radixSortFloat64.html","kind":8,"packageRank":0,"desc":"Advanced version that works directly with Float64List for maximum performance.","enclosedBy":{"name":"radix_pulse","kind":9,"href":"radix_pulse/"}},{"name":"radixSortFloat64WithNaN","qualifiedName":"radix_pulse.radixSortFloat64WithNaN","href":"radix_pulse/radixSortFloat64WithNaN.html","kind":8,"packageRank":0,"desc":"Sorts a list of doubles with NaN handling options.","enclosedBy":{"name":"radix_pulse","kind":9,"href":"radix_pulse/"}},{"name":"radixSortInt","qualifiedName":"radix_pulse.radixSortInt","href":"radix_pulse/radixSortInt.html","kind":8,"packageRank":0,"desc":"Sorts a list of integers in place using a stable Radix Sort.","enclosedBy":{"name":"radix_pulse","kind":9,"href":"radix_pulse/"}},{"name":"radixSortInt32","qualifiedName":"radix_pulse.radixSortInt32","href":"radix_pulse/radixSortInt32.html","kind":8,"packageRank":0,"desc":"Advanced version that works with pre-allocated typed lists for maximum performance.","enclosedBy":{"name":"radix_pulse","kind":9,"href":"radix_pulse/"}},{"name":"radixSortParallelSigned","qualifiedName":"radix_pulse.radixSortParallelSigned","href":"radix_pulse/radixSortParallelSigned.html","kind":8,"packageRank":0,"desc":"","enclosedBy":{"name":"radix_pulse","kind":9,"href":"radix_pulse/"}},{"name":"radixSortParallelUnsigned","qualifiedName":"radix_pulse.radixSortParallelUnsigned","href":"radix_pulse/radixSortParallelUnsigned.html","kind":8,"packageRank":0,"desc":"","enclosedBy":{"name":"radix_pulse","kind":9,"href":"radix_pulse/"}},{"name":"radixSortUint32","qualifiedName":"radix_pulse.radixSortUint32","href":"radix_pulse/radixSortUint32.html","kind":8,"packageRank":0,"desc":"Advanced version for unsigned 32-bit integers with zero-copy when possible.","enclosedBy":{"name":"radix_pulse","kind":9,"href":"radix_pulse/"}}]
